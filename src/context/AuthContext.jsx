import React, { createContext, useState, useContext, useEffect } from "react";
import { useNavigate } from "react-router-dom";

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(
    () => JSON.parse(localStorage.getItem("user")) || null
  );
  const [error, setError] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    if (user) {
      navigate("/"); // üîπ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    }
  }, []);

  const login = async (phone, password) => {
    try {
      console.log("üü° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Ö–æ–¥...");

      const response = await fetch("http://167.99.245.227/api/v1/adminka/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ phone, password }),
      });

      const data = await response.json();
      console.log("üü¢ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data); // ‚ûú –í—ã–≤–µ–¥–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
      }

      if (data.access_token) { // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º access_token
        console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥");
        localStorage.setItem("token", data.access_token); // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º access_token
        localStorage.setItem("user", JSON.stringify({ 
          id: data.user_id,
          name: data.name,
          phone: data.phone,
          isAdmin: data.is_admin
        }));
        setUser({
          id: data.user_id,
          name: data.name,
          phone: data.phone,
          isAdmin: data.is_admin
        });
        setError("");
        navigate("/");
      } else {
        console.error("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω:", data);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
      setError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.");
    }
  };

  const logout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    setUser(null);
    navigate("/login"); // üîπ –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, error }}>
      {children}
    </AuthContext.Provider>
  );
};
